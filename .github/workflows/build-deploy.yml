name: ALLCLL Production CI/CD
on:
  push:
    branches: [main]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# ssh 이용한 빌드 및 배포
# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  client-build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./
      project-directory: ./packages/client

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '24'

      - name: Install NPM packages
        run: |
          npm install -g pnpm
          pnpm i --frozen-lockfile
        working-directory: ${{env.working-directory}}

      - name: Build Client project
        run: |
          pnpm run build-client
          cd ${{env.project-directory}}
          mkdir -p ./build
          cp -r dist ./build
          cp package.json ./build/package.json
        #          cp pnpm-lock.yaml ./build/pnpm-lock.yaml
        env:
          CI: ''
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
          VITE_CLARITY_PROJECT_ID: ${{ secrets.CLARITY_PROJECT_ID }}
          VITE_AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
          VITE_SUPABASE_URL: ${{ secrets.MAIN_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.MAIN_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_TABLE_NAME: ${{ secrets.MAIN_SUPABASE_TABLE_NAME }}
          VITE_DEV_SERVER: false
        working-directory: ${{env.working-directory}}

      #    - name: Run tests
      #      run: npm run test
      #      working-directory: ${{env.working-directory}}

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v4
        with:
          name: production-files
          path: ${{env.project-directory}}/build

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: production-files
          path: ./build

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GIT_TOKEN }}
          publish_dir: ${{env.project-directory}}/build

  client-deploy:
    runs-on: ubuntu-latest
    needs: client-build

    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.MAIN_SERVER_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.MAIN_SERVER_SSH_KEY }}
          #passphrase: ${{ secrets.PASSPHRASE }}
          port: 22
          script: |
            cd ${{ secrets.PWD }}/frontend
            sudo git pull https://${{ secrets.GIT_TOKEN }}:x-oauth-basic@github.com/allcll/frontend.git gh-pages
            sudo systemctl reload nginx
            # 필요한 cmd 명령어 사용

### Admin page 배포

  admin-build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./
      project-directory: ./packages/admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install NPM packages
        run: |
          npm install -g pnpm
          pnpm i --frozen-lockfile
        working-directory: ${{env.working-directory}}

      - name: Build Admin project
        run: |
          pnpm run build-admin
          cd ${{env.project-directory}}
        working-directory: ${{env.working-directory}}

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v4
        with:
          name: admin-build-files
          path: ${{env.project-directory}}/dist

  admin-deploy:
    runs-on: ubuntu-latest
    needs: admin-build
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: admin-build-files
          path: .

      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          port: 22
          script: |
            scp -r ./build/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${secrets.PWD}/admin
            sudo systemctl reload nginx


# cloudfront 배포

## Allow one concurrent deployment
#concurrency:
#  group: 'pages'
#  cancel-in-progress: true
#
#jobs:
#  client-deploy:
#    name: build
#    runs-on: ubuntu-latest
#    env:
#      working-directory: ./
#      project-directory: ./packages/client
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Install Node.js
#        uses: actions/setup-node@v1
#        with:
#          node-version: '24'
#
#      - name: Install NPM packages
#        run: |
#          npm install -g pnpm
#          pnpm i --frozen-lockfile
#        working-directory: ${{env.working-directory}}
#
#      - name: Build Client project
#        run: |
#          pnpm run build-client
#          cd ${{env.project-directory}}
#        env:
#          CI: ''
#          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
#          VITE_GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
#          VITE_CLARITY_PROJECT_ID: ${{ secrets.CLARITY_PROJECT_ID }}
#          VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }}
#          VITE_DEV_SERVER: false
#        working-directory: ${{env.working-directory}}
#
#      - name: Upload production-ready build files
#        uses: actions/upload-artifact@v4
#        with:
#          name: production-files
#          path: ${{env.project-directory}}/dist
#
#      - name: Delete unused files
#        run: |
#          rm -rf ${{env.project-directory}}/dist/report.html
#
#      # Deployment
#      - name: Deploy to S3
#        uses: jakejarvis/s3-sync-action@master
#        with:
#          args: --acl public-read --delete
#        env:
#          AWS_S3_BUCKET: ${{ secrets.MAIN_AWS_BUCKET_NAME }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.MAIN_AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.MAIN_AWS_SECRET_ACCESS_KEY }}
#          AWS_REGION: ${{ secrets.MAIN_AWS_DEFAULT_REGION }}
#          SOURCE_DIR: ${{env.project-directory}}/dist
#
#      - name: Invalidate CloudFront
#        uses: chetan/invalidate-cloudfront-action@master
#        env:
#          PATHS: '/*'
#          AWS_ACCESS_KEY_ID: ${{ secrets.MAIN_AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.MAIN_AWS_SECRET_ACCESS_KEY }}
#          AWS_REGION: ${{ secrets.MAIN_AWS_DEFAULT_REGION }}
#          DISTRIBUTION: ${{ secrets.MAIN_AWS_DISTRIBUTION_ID }}
