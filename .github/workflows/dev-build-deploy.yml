name: ALLCLL DEV CI/CD
on:
  push:
    branches: [ develop ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  client-dev-ci:
    runs-on: ubuntu-latest
    env:
      working-directory: ./
      project-directory: ./packages/client

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install NPM packages
        run: |
          npm install -g pnpm
          pnpm i --frozen-lockfile
        working-directory: ${{env.working-directory}}

      - name: Build Client project
        run: |
          pnpm run build-client
          cd ${{env.project-directory}}
        env:
          VITE_SUPABASE_URL: ${{ secrets.DEV_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.DEV_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_TABLE_NAME: ${{ secrets.DEV_SUPABASE_TABLE_NAME }}
          VITE_API_BASE_URL: ${{ secrets.DEV_API_BASE_URL }}
          VITE_DEV_SERVER: true
        working-directory: ${{env.working-directory}}

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v4
        with:
          name: development-files
          path: ${{env.project-directory}}/dist

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GIT_TOKEN }}
          publish_dir: ${{env.project-directory}}/dist
          publish_branch: 'gh-dev-pages'

  client-dev-deploy:
    runs-on: ubuntu-latest
    needs: client-dev-ci

    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          #passphrase: ${{ secrets.PASSPHRASE }}
          port: 22
          script: |
            cd ${{ secrets.PWD }}/client
            sudo git pull https://${{ secrets.GIT_TOKEN }}:x-oauth-basic@github.com/allcll/frontend.git gh-dev-pages
            sudo systemctl reload nginx
            # 필요한 cmd 명령어 사용


  client-test:
    runs-on: ubuntu-latest
    needs: client-dev-deploy
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install NPM packages
        run: |
          npm install -g pnpm
          pnpm i --frozen-lockfile

      - name: Install Playwright Browsers
        run: |
          cd ./packages/e2e
          npx playwright install --with-deps
      - name: Run Playwright tests
        run: |
          pnpm run test
        env:
          VITE_TEST_ENV: ${{ secrets.DEV_TEST_ENV }}
          # Add any other environment variables needed for your tests here

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  ######## Admin Dev Build and Deploy ########

  admin-dev-cicd:
    runs-on: ubuntu-latest
    env:
      working-directory: ./
      project-directory: ./packages/admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install NPM packages
        run: |
          npm install -g pnpm
          pnpm i --frozen-lockfile
        working-directory: ${{env.working-directory}}

      - name: Build Client project
        run: |
          pnpm run build-admin
          # cd ${{env.project-directory}}
        env:
          VITE_DEV_SERVER: true
        working-directory: ${{env.working-directory}}

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v4
        with:
          name: admin-development-files
          path: ${{env.project-directory}}/dist

      - uses: actions/download-artifact@v4
        with:
          name: admin-development-files
          path: buildAdmin

      - name: Copy files to Server via SCP
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          port: 22
          source: buildAdmin/*
          target: ${{secrets.PWD}}/admin # 원격 서버의 배포 경로

      - name: deploy - executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
          port: 22
          script: |
            sudo systemctl reload nginx


### Deployment to Cloudfront

#      - name: Deploy to S3
#        uses: jakejarvis/s3-sync-action@master
#        with:
#          args: --acl public-read --delete
#        env:
#          AWS_S3_BUCKET: ${{ secrets.DEV_AWS_BUCKET_NAME }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
#          AWS_REGION: ${{ secrets.DEV_AWS_DEFAULT_REGION }}
#          SOURCE_DIR: ${{env.project-directory}}/dist
#
#      - name: Invalidate CloudFront
#        uses: chetan/invalidate-cloudfront-action@master
#        env:
#          PATHS: '/*'
#          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
#          AWS_REGION: ${{ secrets.DEV_AWS_DEFAULT_REGION }}
#          DISTRIBUTION: ${{ secrets.DEV_AWS_DISTRIBUTION_ID }}
